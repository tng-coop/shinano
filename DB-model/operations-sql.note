-- -*- SQL -*-

-- * user
--    * add user
--    * delete user
-- * job listing / seeking
--     * add job listing / seeking
--         * (puiblication range : optional)
--     * open job listing / seeking
--     * close job listing / seeking
--     * view job listing / seeking
-- * search job listing / seeking
-- * login / logout

-- -----------------------------------------
-- user

-- add user
-- --------
-- example 1
--   input params
SET @email = 'mail@piyomail.com', @passwd_hash = 'hsah_dwssap', @name = 'John Smith', @note = 'Hi! this is my note';
--
START TRANSACTION;

SELECT @last_uid := last_uid FROM public_uid_state LIMIT 1 FOR UPDATE;
SET @public_uid := 14745600; -- get result of galois_next24(@last_uid)
UPDATE public_uid_state SET last_uid = @public_uid;

COMMIT;
--
START TRANSACTION;

INSERT INTO user(email, passwd_hash, public_uid, last_thing, name, note, created_at, updated_at)
       VALUES (@email, @passwd_hash, @public_uid, 0, @name, @note, current_timestamp, current_timestamp);

COMMIT;
-- --------
-- example 2
--   input params
SET @email = 'tony@morris.com', @passwd_hash = 'hsah_dwssap', @name = 'Tony Morris', @note = 'Tony''s note example';
--
START TRANSACTION;

SELECT @last_uid := last_uid FROM public_uid_state LIMIT 1 FOR UPDATE;
SET @public_uid := 7372800;-- get result of galois_next24(@last_uid)
UPDATE public_uid_state SET last_uid = @public_uid;

COMMIT;
--
START TRANSACTION;

INSERT INTO user(email, passwd_hash, public_uid, last_thing, name, note, created_at, updated_at)
       VALUES (@email, @passwd_hash, @public_uid, 0, @name, @note, current_timestamp, current_timestamp);

COMMIT;

-- -----------------------------------------
-- job listing / seeking

-- add job listing / seeking
-- --------
-- example 1
--   input params
SET @attribute = 'L', @email = 'mail@piyomail.com', @title = 'John job listing', @description = 'example job description 1';
--   multi statements transaction
START TRANSACTION;

SELECT @user_id := id, @last_thing := last_thing FROM user WHERE email = @email FOR UPDATE;
SET @id_on_user = @last_thing + 1;
UPDATE user SET last_thing = @id_on_user WHERE id = @user_id;
INSERT INTO job_entry(user, id_on_user, attribute, title, description, created_at, updated_at)
       VALUES (@user_id, @id_on_user, @attribute, @title, @description, current_timestamp, current_timestamp);

COMMIT;
-- --------
-- example 2
--   input params
SET @attribute = 'L', @email = 'tony@morris.com', @title = 'Tony job listing', @description = 'example job description 2';
--   multi statements transaction
START TRANSACTION;

SELECT @user_id := id, @last_thing := last_thing FROM user WHERE email = @email FOR UPDATE;
SET @id_on_user = @last_thing + 1;
UPDATE user SET last_thing = @id_on_user WHERE id = @user_id;
INSERT INTO job_entry(user, id_on_user, attribute, title, description, created_at, updated_at)
       VALUES (@user_id, @id_on_user, @attribute, @title, @description, current_timestamp, current_timestamp);

COMMIT;
-- --------
-- example 3
--   input params
SET @attribute = 'S', @email = 'mail@piyomail.com', @title = 'John job seeking', @description = 'example job seeking content 1';
--   multi statements transaction
START TRANSACTION;

SELECT @user_id := id, @last_thing := last_thing FROM user WHERE email = @email FOR UPDATE;
SET @id_on_user = @last_thing + 1;
UPDATE user SET last_thing = @id_on_user WHERE id = @user_id;
INSERT INTO job_entry(user, id_on_user, attribute, title, description, created_at, updated_at)
       VALUES (@user_id, @id_on_user, @attribute, @title, @description, current_timestamp, current_timestamp);

COMMIT;


-- open job listing / seeking
-- --------
-- example 1
--   input params
SET @attribute = 'L', @email = 'tony@morris.com', @id_on_user = 1;
--   Two statements transaction
START TRANSACTION;

SELECT @user_id := U.id FROM user AS U WHERE U.email = @email FOR UPDATE;
UPDATE job_entry AS J SET opened_at = current_timestamp
       WHERE user = @user_id AND id_on_user = @id_on_user AND attribute = @attribute;

COMMIT;
-- --------
-- example 2
--   input params
SET @attribute = 'L', @email = 'mail@piyomail.com', @id_on_user = 1;
--   One UPDATE statement uses a correlation query to specify a specific user from email
START TRANSACTION;

SELECT @user_id := U.id FROM user AS U WHERE U.email = @email FOR UPDATE;
UPDATE job_entry AS J SET opened_at = current_timestamp
       WHERE user = @user_id AND id_on_user = @id_on_user AND attribute = @attribute;

COMMIT;
-- --------
-- example 3
--   input params
SET @attribute = 'S', @email = 'mail@piyomail.com', @id_on_user = 2;
--   Two statements transaction
START TRANSACTION;

SELECT @user_id := U.id FROM user AS U WHERE U.email = @email FOR UPDATE;
UPDATE job_entry AS J SET opened_at = current_timestamp
       WHERE user = @user_id AND id_on_user = @id_on_user AND attribute = @attribute;

COMMIT;


-- close job listing
-- --------
-- candidate 1
--   input params
SET @attribute = 'L', @email = 'tony@morris.com', @id_on_user = 1;
--   Two statements transaction
START TRANSACTION;

SELECT @user_id := U.id FROM user AS U WHERE U.email = @email FOR UPDATE;
UPDATE job_entry AS J SET closed_at = current_timestamp
       WHERE user = @user_id AND id_on_user = @id_on_user AND attribute = @attribute;

COMMIT;
-- --------
-- candidate 2
--   input params
SET @attribute = 'L', @email = 'mail@piyomail.com', @id_on_user = 1;
--   The UPDATE statement uses a correlation query to specify a specific user from email
START TRANSACTION;

SELECT @user_id := U.id FROM user AS U WHERE U.email = @email FOR UPDATE;
UPDATE job_entry AS J SET closed_at = current_timestamp
       WHERE user = @user_id AND id_on_user = @id_on_user AND attribute = @attribute;

COMMIT;
-- --------
-- example 1
--   input params
SET @attribute = 'S', @email = 'mail@piyomail.com', @id_on_user = 2;
--   Two statements transaction
START TRANSACTION;

SELECT @user_id := U.id FROM user AS U WHERE U.email = @email FOR UPDATE;
UPDATE job_entry AS J SET closed_at = current_timestamp
       WHERE user = @user_id AND id_on_user = @id_on_user AND attribute = @attribute;

COMMIT;

-- view job listing / seeking
-- --------
-- specify set from public_uid, ordered, opened first
--   input params
SET @public_uid := 7372800;
--   joined SELECT
SELECT U.public_uid, U.name, J.attribute, J.title, J.description, J.created_at, J.updated_at, J.opened_at, J.closed_at
       FROM user as U INNER JOIN job_entry AS J
       ON U.id = J.user
       WHERE U.public_uid = @public_uid
       ORDER BY J.attribute, J.opened_at IS NULL ASC, J.created_at ASC;

-- --------
-- sepecify set from email, ordered, opened first
--   input params
SET @email := 'mail@piyomail.com';
--   joined SELECT
SELECT U.public_uid, U.name, J.attribute, J.title, J.description, J.created_at, J.updated_at, J.opened_at, J.closed_at
       FROM user as U INNER JOIN job_entry AS J
       ON U.id = J.user
       WHERE U.email = @email
       ORDER BY J.attribute, J.opened_at IS NULL ASC, J.created_at ASC;

-- search job listing / seeking
--   no input params
SET @search_pat := 'job';
SELECT U.public_uid, U.name, J.attribute, J.title, J.description, J.created_at, J.updated_at, J.opened_at, J.closed_at
       FROM user as U INNER JOIN job_entry AS J
       ON U.id = J.user
       WHERE J.title LIKE CONCAT('%', @search_pat, '%')
       ORDER BY J.attribute, J.user, J.opened_at IS NULL ASC, J.created_at ASC;
